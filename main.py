from telethon import TelegramClient, events

# ÿ∂ÿπ API ID Ÿà API HASH ÿßŸÑÿÆÿßÿµÿ© ÿ®ŸÉ ŸÖŸÜ my.telegram.org
api_id = 123456      # ÿßÿ≥ÿ™ÿ®ÿØŸÑŸáÿß ÿ®ŸÄ API ID
api_hash = "ÿ∂ÿπ_API_HASH_ŸáŸÜÿß"

# ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ŸÑÿ≥ÿ© ÿ®ÿßÿ≥ŸÖ "my_account"
client = TelegramClient("my_account", api_id, api_hash)

@client.on(events.NewMessage)
async def handler(event):
    sender = await event.get_sender()
    name = sender.first_name
    text = event.raw_text
    print(f"üì© ÿ±ÿ≥ÿßŸÑÿ© ÿ¨ÿØŸäÿØÿ© ŸÖŸÜ {name}: {text}")
    
    # ÿßŸÑÿ±ÿØ ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿä
    await event.reply("üëã ÿ£ŸáŸÑÿßŸã! ÿ£ŸÜÿß ÿ®Ÿàÿ™ ÿ¥ÿÆÿµŸä ÿ¥ÿ∫ÿßŸÑ ÿ®ŸÄ Telethon.")

print("üöÄ ÿ¨ÿßÿ±Ÿä ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ®Ÿàÿ™...")
client.start()
client.run_until_disconnected()
print("ŸÖÿ±ÿ≠ÿ®ÿß! ÿßŸÑÿ®Ÿàÿ™ ŸäÿπŸÖŸÑ ÿ®ŸÜÿ¨ÿßÿ≠ üéØ")
import os
import time
import requests
from datetime import datetime

# ŸÇÿ±ÿßÿ°ÿ© ÿßŸÑŸÇŸäŸÖ ŸÖŸÜ Secrets
WALLET_ADDRESS = os.environ.get("WALLET_ADDRESS")
PRIVATE_KEY = os.environ.get("PRIVATE_KEY")
SOLSNIFFER_API_KEY = os.environ.get("SOLSNIFFER_API_KEY")

# ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ™ÿØÿßŸàŸÑ
BUY_AMOUNT_SOL = 1
SLIPPAGE = 0.15  # 15%
TAKE_PROFIT_MULTIPLIER = 10
HOLD_PROFIT_PERCENT = 0.15

# ŸÖÿµÿßÿØÿ± ÿßŸÑÿπŸÖŸÑÿßÿ™
SOURCES = [
    "https://pump.fun/api/board",
    "https://meteora.ag/api/tokens",
    "https://letsbonk.fun/api/tokens"
]

# ŸÅÿ≠ÿµ ÿ≠ÿ≥ÿßÿ® X (Twitter)
def check_x_account(twitter_handle):
    # Ÿáÿ∞Ÿá ÿØÿßŸÑÿ© ÿ¥ŸÉŸÑŸäÿ© - ÿ™ÿ≠ÿ™ÿßÿ¨ API ŸÖŸÜ Twitter ÿ£Ÿà scraping
    # ŸáŸÜÿß ÿ≥ŸÜÿ∂ÿπ ŸÇŸäŸÖ ŸàŸáŸÖŸäÿ© ŸÑŸÑÿßÿÆÿ™ÿ®ÿßÿ±
    followers_count = 5000
    high_profile_followers = True
    username_changes = 2
    return followers_count, high_profile_followers, username_changes

# ŸÅÿ≠ÿµ SolSniffer
def check_solsniffer(contract_address):
    url = f"https://api.solsniffer.com/audit/{contract_address}"
    headers = {"Authorization": f"Bearer {SOLSNIFFER_API_KEY}"}
    try:
        resp = requests.get(url, headers=headers, timeout=10)
        if resp.status_code == 200:
            data = resp.json()
            return data.get("score", 0)
        else:
            return 0
    except Exception as e:
        print(f"[SolSniffer Error] {e}")
        return 0

# ŸÉÿ¥ŸÅ ÿßŸÑÿ™ÿØÿßŸàŸÑ ÿßŸÑŸàŸáŸÖŸä (ŸÖÿ´ÿßŸÑ ŸÖÿ®ÿ≥ÿ∑)
def detect_wash_trading(token_data):
    # ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿ≠ÿ¨ŸÖ ÿßŸÑÿ™ÿØÿßŸàŸÑ ŸÉÿ®Ÿäÿ± ÿ®ÿ¥ŸÉŸÑ ÿ∫Ÿäÿ± ŸÖŸÜÿ∑ŸÇŸä ŸÅŸä ŸàŸÇÿ™ ŸÇÿµŸäÿ±
    volume = token_data.get("volume", 0)
    tx_count = token_data.get("transactions", 0)
    if tx_count > 0 and volume / tx_count > 1000:
        return True
    return False

# ÿ™ŸÜŸÅŸäÿ∞ ÿ¥ÿ±ÿßÿ°
def execute_buy(token):
    print(f"[BUY] ÿ¥ÿ±ÿßÿ° {BUY_AMOUNT_SOL} SOL ŸÖŸÜ {token['symbol']} ÿ®ÿ≥ÿπÿ± {token['price']} (ÿßŸÜÿ≤ŸÑÿßŸÇ {SLIPPAGE*100}%)")

# ÿ™ŸÜŸÅŸäÿ∞ ÿ®Ÿäÿπ
def execute_sell(token, entry_price):
    print(f"[SELL] ÿ®Ÿäÿπ {token['symbol']} ÿ®ÿ≥ÿπÿ± {token['price']} (ÿ¨ŸÜŸä ÿ£ÿ±ÿ®ÿßÿ≠ {TAKE_PROFIT_MULTIPLIER}x ŸÖÿπ ÿßÿ≠ÿ™ŸÅÿßÿ∏ {HOLD_PROFIT_PERCENT*100}%)")

# ÿ¨ŸÑÿ® ÿßŸÑÿπŸÖŸÑÿßÿ™ ŸÖŸÜ ÿßŸÑŸÖÿµÿßÿØÿ±
def fetch_tokens():
    tokens = []
    for src in SOURCES:
        try:
            resp = requests.get(src, timeout=10)
            if resp.status_code == 200:
                data = resp.json()
                # ÿØŸÖÿ¨ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ (ŸáŸÜÿß ŸÜŸÅÿ™ÿ±ÿ∂ ÿ£ŸÜ ŸÉŸÑ API ŸäÿπŸäÿØ ŸÇÿßÿ¶ŸÖÿ©)
                tokens.extend(data)
        except Exception as e:
            print(f"[Fetch Error] {src} => {e}")
    return tokens

# ÿ≠ŸÑŸÇÿ© ÿßŸÑŸÅÿ≠ÿµ ÿßŸÑŸÖÿ≥ÿ™ŸÖÿ±
def main():
    print("[BOT] ÿ®ÿØÿ° ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ®Ÿàÿ™...")
    portfolio = {}  # ŸÑÿ≠ŸÅÿ∏ ÿßŸÑÿ£ÿ≥ÿπÿßÿ± ÿπŸÜÿØ ÿßŸÑÿ¥ÿ±ÿßÿ°
    while True:
        try:
            print(f"\n[SCAN] ÿ®ÿØÿ° ÿßŸÑŸÅÿ≠ÿµ ŸÅŸä {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC")
            tokens = fetch_tokens()
            for token in tokens:
                # ŸÅÿ≠ÿµ ÿ≠ÿ≥ÿßÿ® X
                followers, high_profile, name_changes = check_x_account(token.get("twitter", ""))
                if not high_profile or name_changes > 3:
                    continue

                # ŸÅÿ≠ÿµ SolSniffer
                score = check_solsniffer(token.get("contract", ""))
                if score < 85:
                    continue

                # ŸÉÿ¥ŸÅ ÿßŸÑÿ™ÿØÿßŸàŸÑ ÿßŸÑŸàŸáŸÖŸä
                if detect_wash_trading(token):
                    continue

                # ÿ™ŸÜŸÅŸäÿ∞ ÿ¥ÿ±ÿßÿ° ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ ŸÅŸä ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ©
                if token["symbol"] not in portfolio:
                    execute_buy(token)
                    portfolio[token["symbol"]] = token["price"]
                else:
                    entry_price = portfolio[token["symbol"]]
                    if token["price"] >= entry_price * TAKE_PROFIT_MULTIPLIER:
                        execute_sell(token, entry_price)
                        del portfolio[token["symbol"]]

            time.sleep(60)  # ŸÅÿ≠ÿµ ŸÉŸÑ ÿØŸÇŸäŸÇÿ©
        except Exception as e:
            print(f"[ERROR] {e}")
            time.sleep(60)

if __name__ == "__main__":
    main()
    
